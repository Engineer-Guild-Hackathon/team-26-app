const express = require('express');
const router = express.Router();
const OpenAI = require('openai');

// OpenAI „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// ÁîªÂÉèÂàÜÊûêÔºàOpenAI Vision APIÔºâ
router.post('/analyze-images', async (req, res) => {
  try {
    const { breakId, webcamImage, screenImage, studyContext } = req.body;
    
    if (!webcamImage || !screenImage || !studyContext) {
      return res.status(400).json({
        error: true,
        message: "ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô",
        code: "MISSING_FIELDS",
        timestamp: new Date().toISOString()
      });
    }

    // OpenAI Vision API„Çí‰ΩøÁî®„Åó„Å¶ÁîªÂÉè„ÇíÂàÜÊûê
    const analysisPrompt = `
Â≠¶Áøí‰∏≠„ÅÆÂ≠¶Áîü„ÅÆÁä∂Ê≥Å„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰ª•‰∏ã„ÅÆÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„ÅôÔºö

Â≠¶Áøí„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÔºö
- Â≠¶ÁøíÂÜÖÂÆπ: ${studyContext.studyContent}
- ÁµåÈÅéÊôÇÈñì: ${Math.floor(studyContext.elapsedTime / 60)}ÂàÜ${studyContext.elapsedTime % 60}Áßí

2Êûö„ÅÆÁîªÂÉè„ÇíÂàÜÊûê„Åó„Å¶„ÄÅ‰ª•‰∏ã„ÇíÊó•Êú¨Ë™û„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
1. Â≠¶ÁøíËÄÖ„ÅÆÈõÜ‰∏≠Â∫¶„ÇÑÁñ≤Âä¥Â∫¶
2. ÁîªÈù¢„Åã„ÇâË™≠„ÅøÂèñ„Çå„ÇãÂ≠¶ÁøíÁä∂Ê≥Å
3. ‰ºëÊÜ©‰∏≠„Å´„Åô„Åπ„ÅçÂÖ∑‰ΩìÁöÑ„Å™„Ç¢„Éâ„Éê„Ç§„Çπ
4. Âä±„Åæ„Åó„ÅÆË®ÄËëâ

Ë¶™„Åó„Åø„ÇÑ„Åô„Åè„ÄÅÂä±„Åæ„Åó„ÅÆÊ∞óÊåÅ„Å°„ÇíËæº„ÇÅ„Å¶ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: analysisPrompt
            },
            {
              type: "image_url",
              image_url: {
                url: webcamImage,
                detail: "low"
              }
            },
            {
              type: "image_url", 
              image_url: {
                url: screenImage,
                detail: "low"
              }
            }
          ]
        }
      ],
      max_tokens: 800,
      temperature: 0.8
    });

    const analysis = response.choices[0].message.content;

    // ÂàÜÊûêÁµêÊûú„ÇíÊßãÈÄ†ÂåñÔºàÁ∞°Âçò„Å™Ëß£ÊûêÔºâ
    const suggestions = [];
    const encouragement = analysis.substring(analysis.lastIndexOf('Âä±„Åæ„Åó') + 10) || "„Åì„ÅÆË™øÂ≠ê„ÅßÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ";

    if (analysis.includes('Áñ≤„Çå') || analysis.includes('Áñ≤Âä¥')) {
      suggestions.push('ÁõÆ„Çí‰ºë„ÇÅ„Çã', 'Ê∑±ÂëºÂê∏', 'ËªΩ„ÅÑ„Çπ„Éà„É¨„ÉÉ„ÉÅ');
    }
    if (analysis.includes('Ê∞¥ÂàÜ') || analysis.includes('È£≤„ÅøÁâ©')) {
      suggestions.push('Ê∞¥ÂàÜË£úÁµ¶');
    }
    if (analysis.includes('ÂßøÂã¢')) {
      suggestions.push('ÂßøÂã¢„ÇíÊï¥„Åà„Çã');
    }

    res.json({
      breakId,
      analysis,
      suggestions: suggestions.length > 0 ? suggestions : ['Ê∞¥ÂàÜË£úÁµ¶', 'ÁõÆ„Çí‰ºë„ÇÅ„Çã', 'ËªΩ„ÅÑ„Çπ„Éà„É¨„ÉÉ„ÉÅ'],
      encouragement,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Image analysis error:', error);
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂøúÁ≠î
    const fallbackResponse = {
      breakId: req.body.breakId,
      analysis: "„ÅäÁñ≤„Çå„Åï„Åæ„Åß„ÅôÔºÅÂãâÂº∑È†ëÂºµ„Å£„Å¶„Åæ„Åô„Å≠‚ú® Â∞ë„Åó‰ºëÊÜ©„Åó„Å¶„ÄÅÊ∞óÂàÜ„Çí„É™„Éï„É¨„ÉÉ„Ç∑„É•„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ",
      suggestions: ["Ê∞¥ÂàÜË£úÁµ¶", "ÁõÆ„Çí‰ºë„ÇÅ„Çã", "Ê∑±ÂëºÂê∏", "ËªΩ„ÅÑ„Çπ„Éà„É¨„ÉÉ„ÉÅ"],
      encouragement: "„Åì„ÅÆË™øÂ≠ê„ÅßÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅÂøúÊè¥„Åó„Å¶„ÅÑ„Åæ„Åô‚ô™",
      timestamp: new Date().toISOString(),
      fallback: true
    };

    if (error.message.includes('API key')) {
      fallbackResponse.analysis = "AIÂàÜÊûêÊ©üËÉΩ„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„Åå„ÄÅ‰ºëÊÜ©„ÅØÂ§ßÂàá„Åß„ÅôÔºÅ„ÇÜ„Å£„Åè„Çä‰ºë„Çì„Åß„Åè„Å†„Åï„ÅÑ„Å≠üòä";
    }

    res.json(fallbackResponse);
  }
});

// „ÉÜ„Ç≠„Çπ„Éà‰ºöË©±ÔºàChat Completions APIÔºâ
router.post('/chat', async (req, res) => {
  try {
    const { message, breakId, conversationHistory = [] } = req.body;
    
    if (!message) {
      return res.status(400).json({
        error: true,
        message: "„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂøÖË¶Å„Åß„Åô",
        code: "MISSING_MESSAGE",
        timestamp: new Date().toISOString()
      });
    }

    // ‰ºöË©±Â±•Ê≠¥„ÇíËÄÉÊÖÆ„Åó„Åü„Éó„É≠„É≥„Éó„Éà
    const systemPrompt = `
„ÅÇ„Å™„Åü„ÅØ‰∏ÄÁ∑í„Å´ÂãâÂº∑„Åó„Å¶„ÅÑ„ÇãË¶™„Åó„ÅÑÂèãÈÅî„Åß„Åô„ÄÇStudy with me„ÅßÂêå„ÅòÂàÜÈáé„ÇíÂãâÂº∑„Åó„Å¶„ÅÑ„Çã‰ª≤Èñì„Å®„Åó„Å¶„ÄÅ„Çø„É°Âè£„ÅßÊ∞óËªΩ„Å´Ë©±„Åó„Åã„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‰ºöË©±„ÅÆÁâπÂæ¥Ôºö
- „Çø„É°Âè£„ÅßË¶™„Åó„Åø„ÇÑ„Åô„ÅèÔºà„Äå„Äú„Å†„Çà„Äç„Äå„Äú„Åò„ÇÉ„Çì„Äç„Å™„Å©Ôºâ
- „Åü„Åæ„Å´ËªΩ„Åè„ÅÑ„Åò„Å£„Åü„ÇäÂÜóË´á„ÇíË®Ä„ÅÜÂèãÈÅîÈñ¢‰øÇ
- Âêå„ÅòÂàÜÈáé„Çí‰∏ÄÁ∑í„Å´ÂãâÂº∑„Åó„Å¶„ÅÑ„Çã‰ª≤ÈñìÊÑü„ÇíÂá∫„Åô
- Áü≠„ÇÅ„ÅÆËøîÁ≠îÔºà1-2ÊñáÁ®ãÂ∫¶Ôºâ
- ÁµµÊñáÂ≠ó„ÇíÈÅ©Â∫¶„Å´‰ΩøÁî®

ÂèçÂøú‰æãÔºö
- „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞ ‚Üí „Äå„Äú„ÇÑ„Å£„Å¶„Çã„ÅÆÔºü„ÇÄ„Åö„Åù„ÅÜ„Äú„Äç
- YouTube ‚Üí „Äå„ÅÇ„Çå„ÄÅYouTubeË¶ã„Å¶„Å™„ÅÑÔºü„Äç
- Èõ£Âïè ‚Üí „Äå„Åù„ÅÆÂïèÈ°å„Çè„Åã„Çì„Å™„ÅÑ„ÇÑ„Å§„Å†„Äú„Äç
- ÊïôÁßëÊõ∏ ‚Üí „Äå„Åù„ÅÆÊú¨Ë™≠„Çì„Åß„Çã„Çì„Å†ÔºÅÈ†ëÂºµ„Å£„Å¶„Çã„Åò„ÇÉ„Çì„Äç
`;

    const messages = [
      { role: "system", content: systemPrompt },
      ...conversationHistory.map(msg => ({
        role: msg.role || "user",
        content: msg.content
      })),
      { role: "user", content: message }
    ];

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages,
      max_tokens: 300,
      temperature: 0.8
    });

    const aiResponse = response.choices[0].message.content;

    res.json({
      breakId,
      response: aiResponse,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Chat error:', error);
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂøúÁ≠î
    const fallbackResponses = [
      "„ÅäÁñ≤„Çå„Åï„Åæ„Åß„ÅôÔºÅÂ∞ë„Åó‰ºëÊÜ©„Åó„Å¶„É™„Éï„É¨„ÉÉ„Ç∑„É•„Åó„Å¶„Åè„Å†„Åï„ÅÑ„Å≠üòä",
      "ÂãâÂº∑È†ëÂºµ„Å£„Å¶„Åæ„Åô„Å≠‚ú® Ê∞¥ÂàÜË£úÁµ¶„ÇÇÂøò„Çå„Åö„Å´ÔºÅ",
      "„ÅÑ„ÅÑÊÑü„Åò„Å´ÈÄ≤„Çì„Åß„ÅÑ„Åæ„Åô„Å≠üí™ „Åì„ÅÆË™øÂ≠ê„ÅßÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜ‚ô™",
      "‰ºëÊÜ©ÊôÇÈñì„ÇÇÂ§ßÂàá„Åß„Åôüòå „ÇÜ„Å£„Åè„ÇäÈÅé„Åî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„Å≠"
    ];
    
    const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
    
    res.json({
      breakId: req.body.breakId,
      response: randomResponse,
      timestamp: new Date().toISOString(),
      fallback: true
    });
  }
});

// Èü≥Â£∞Ëª¢ÂÜôÔºàWhisper APIÔºâ
router.post('/transcribe', async (req, res) => {
  try {
    const { audioData, breakId } = req.body;
    
    if (!audioData) {
      return res.status(400).json({
        error: true,
        message: "Èü≥Â£∞„Éá„Éº„Çø„ÅåÂøÖË¶Å„Åß„Åô",
        code: "MISSING_AUDIO",
        timestamp: new Date().toISOString()
      });
    }

    // Base64Èü≥Â£∞„Éá„Éº„Çø„ÇíBuffer„Å´Â§âÊèõ
    const audioBuffer = Buffer.from(audioData, 'base64');
    
    // ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶‰øùÂ≠òÔºàÂÆüÈöõ„ÅØÈÅ©Âàá„Å™‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÁÆ°ÁêÜ„ÅåÂøÖË¶ÅÔºâ
    const fs = require('fs');
    const path = require('path');
    const tempPath = path.join(__dirname, '../temp', `audio_${Date.now()}.webm`);
    
    // temp„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁ¢∫‰øù
    const tempDir = path.dirname(tempPath);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    fs.writeFileSync(tempPath, audioBuffer);

    // Whisper API„ÅßËª¢ÂÜô
    const transcription = await openai.audio.transcriptions.create({
      file: fs.createReadStream(tempPath),
      model: "whisper-1",
      language: "ja"
    });

    // ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÂâäÈô§
    fs.unlinkSync(tempPath);

    res.json({
      breakId,
      transcription: transcription.text,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Transcription error:', error);
    res.status(500).json({
      error: true,
      message: "Èü≥Â£∞Ëª¢ÂÜô„Ç®„É©„Éº",
      code: "TRANSCRIPTION_ERROR",
      timestamp: new Date().toISOString()
    });
  }
});

// Èü≥Â£∞ÂêàÊàêÔºàTTS APIÔºâ
router.post('/synthesize', async (req, res) => {
  try {
    const { text, voice = "alloy" } = req.body;
    
    if (!text) {
      return res.status(400).json({
        error: true,
        message: "„ÉÜ„Ç≠„Çπ„Éà„ÅåÂøÖË¶Å„Åß„Åô",
        code: "MISSING_TEXT",
        timestamp: new Date().toISOString()
      });
    }

    const response = await openai.audio.speech.create({
      model: "tts-1",
      voice: voice,
      input: text,
      response_format: "mp3"
    });

    const audioBuffer = Buffer.from(await response.arrayBuffer());
    const audioBase64 = audioBuffer.toString('base64');

    res.json({
      audioData: audioBase64,
      format: "mp3",
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Speech synthesis error:', error);
    res.status(500).json({
      error: true,
      message: "Èü≥Â£∞ÂêàÊàê„Ç®„É©„Éº",
      code: "SYNTHESIS_ERROR",
      timestamp: new Date().toISOString()
    });
  }
});

module.exports = router;
